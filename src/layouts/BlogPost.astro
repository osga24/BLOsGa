---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import { ViewTransitions } from 'astro:transitions';

type Props = CollectionEntry<'blog'>['data'] & {
	slug: string;
};

const { title, description, pubDate, updatedDate, heroImage, category, tags, slug } = Astro.props;
---

<html lang="zh-TW">
	<head>
		<BaseHead title={title} description={description} />
		<ViewTransitions/>

	</head>

	<body>
		<Header />
		
		<main class="blog-main">
			<div class="blog-container">
				<!-- å…§å®¹ -->
				<article class="blog-article">
					<nav class="breadcrumb">
						<a href="/">home</a>
						<span>/</span>
						{category && (
							<>
								<a href={`/categories/${encodeURIComponent(category)}/`}>{category}</a>
								<span>/</span>
							</>
						)}
						<span>{title}</span>
					</nav>

					<header class="article-hero">
						<div class="hero-content">
							{category && (
								<span class="article-category">/ {category} /</span>
							)}
							
							<h1 class="article-title">{title}</h1>
							
							<div class="article-meta-line">
								<time class="publish-date">
									<FormattedDate date={pubDate} />
								</time>
								{updatedDate && (
									<time class="update-date">
										æœ€å¾Œæ›´æ–°æ–¼ <FormattedDate date={updatedDate} />
									</time>
								)}
								{tags && tags.length > 0 && (
									<div class="hero-tags">
										{tags.slice(0, 3).map(tag => (
											<span class="tag">#{tag}</span>
										))}
										{tags.length > 3 && (
											<span class="tag more">+{tags.length - 3}</span>
										)}
									</div>
								)}
							</div>
						</div>

						{heroImage && (
							<div class="hero-image">
								<Image 
									width={800} 
									height={400} 
									src={heroImage} 
									alt={title}
									class="hero-img"
								/>
							</div>
						)}
						<br/>
						<div class='article-meta-line'></div>
					</header>

					<!-- TL;DR -->
					{description && (
						<div class="tldr-section">
							<h3 class="tldr-title">ðŸ’¡ TL;DR</h3>
							<p class="tldr-content">{description}</p>
						</div>
					)}

					<!-- æ–‡ç«  -->
					<div class="article-content">
						<slot />
					</div>

					<!-- æ¨™ç±¤ -->
					{tags && tags.length > 0 && (
						<footer class="article-footer">
							<div class="article-tags">
								<span class="tags-label">tags: </span>
								{tags.map(tag => (
									<span class="tag">#{tag}</span>
								))}
							</div>
						</footer>
					)}
				</article>

				<!-- ç›®éŒ„ -->
				<aside class="blog-sidebar">
					<div class="sidebar-section">
						<h3 class="sidebar-title">ç›®éŒ„</h3>
						<nav class="table-of-contents" id="toc">
						</nav>
					</div>
				</aside>
			</div>
		</main>
		
		<div id="lightbox" class="lightbox">
			<div class="lightbox-content">
				<button class="lightbox-close" id="lightbox-close">Ã—</button>
				<img id="lightbox-image" class="lightbox-image" src="" alt="">
				<div id="lightbox-caption" class="lightbox-caption"></div>
			</div>
		</div>
		
		<Footer />

		<script>
			function generateTOC() {
				const toc = document.getElementById('toc');
				const headings = document.querySelectorAll('.article-content h1, .article-content h2, .article-content h3, .article-content h4, .article-content h5, .article-content h6');
				
				if (headings.length === 0) {
					toc.innerHTML = '<p class="no-headings">æ­¤æ–‡ç« æ²’æœ‰æ¨™é¡Œ</p>';
					return;
				}

				let tocHTML = '<ul class="toc-list">';
				
				headings.forEach((heading, index) => {
					if (!heading.id) {
						heading.id = `heading-${index}`;
					}
					
					const level = parseInt(heading.tagName.charAt(1));
					const text = heading.textContent;
					const indent = Math.max(0, (level - 1) * 20);
					
					tocHTML += `
						<li class="toc-item toc-level-${level}" style="margin-left: ${indent}px;">
							<a href="#${heading.id}" class="toc-link">${text}</a>
						</li>
					`;
				});
				
				tocHTML += '</ul>';
				toc.innerHTML = tocHTML;

				const tocLinks = toc.querySelectorAll('.toc-link');
				tocLinks.forEach(link => {
					link.addEventListener('click', (e) => {
						e.preventDefault();
						const targetId = link.getAttribute('href').substring(1);
						const targetElement = document.getElementById(targetId);
						
						if (targetElement) {
							const yOffset = - 100;
							const y = targetElement.getBoundingClientRect().top + window.pageYOffset + yOffset;

							window.scrollTo({
								top: y,
								behavior: 'smooth'
							});
							
							history.pushState(null, null, `#${targetId}`);
						}
					});
				});
			}

			function addImageCaptions() {
				const images = document.querySelectorAll('.article-content img');
				
				images.forEach(img => {
					if (img.parentElement.classList.contains('image-figure')) {
						return;
					}
					
					const altText = img.getAttribute('alt');
					if (altText && altText.trim() !== '') {
						const figure = document.createElement('figure');
						figure.className = 'image-figure';
						
						const caption = document.createElement('figcaption');
						caption.className = 'image-caption';
						caption.textContent = altText;
						
						img.parentNode.insertBefore(figure, img);
						figure.appendChild(img);
						figure.appendChild(caption);
					}
				});
			}

			function initLightbox() {
				const lightbox = document.getElementById('lightbox');
				const lightboxImage = document.getElementById('lightbox-image');
				const lightboxCaption = document.getElementById('lightbox-caption');
				const lightboxClose = document.getElementById('lightbox-close');
				
				function addImageClickHandlers() {
					const images = document.querySelectorAll('.article-content img, .hero-img');
					
					images.forEach(img => {
						img.addEventListener('click', (e) => {
							e.preventDefault();
							
							const src = img.src || img.getAttribute('src');
							const alt = img.alt || '';
							
							lightboxImage.src = src;
							lightboxImage.alt = alt;
							lightboxCaption.textContent = alt;
							
							// é¡¯ç¤º lightbox
							lightbox.classList.add('active');
							document.body.style.overflow = 'hidden';
						});
					});
				}

				function closeLightbox() {
					lightbox.classList.remove('active');
					document.body.style.overflow = '';
					
					setTimeout(() => {
						if (!lightbox.classList.contains('active')) {
							lightboxImage.src = '';
						}
					}, 400);
				}

				lightboxClose.addEventListener('click', closeLightbox);
				
				lightbox.addEventListener('click', (e) => {
					if (e.target === lightbox) {
						closeLightbox();
					}
				});

				document.addEventListener('keydown', (e) => {
					if (e.key === 'Escape' && lightbox.classList.contains('active')) {
						closeLightbox();
					}
				});

				addImageClickHandlers();
			}

			document.addEventListener('DOMContentLoaded', () => {
				addImageCaptions();
				generateTOC();
				initLightbox();
			});
			
			document.addEventListener('astro:page-load', () => {
				addImageCaptions();
				generateTOC();
				initLightbox();
			});
		</script>

	</body>
</html>
